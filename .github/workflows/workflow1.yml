name: Delete Merged Feature Branches

on:
  push:
    branches:
      - main
    
permissions:
  pull-requests: read
  actions: write
  id-token: write
  
jobs:
  delete-merged-feature-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para obtener el historial complete

      - name: get the last pr closed
        id: getpr
        run: |
          echo "pr-number-closed=$(gh pr list --search ${{ github.sha }} --state merged --json number -q '.[] | .number')" >> $GITHUB_ENV
          echo "last merged pr_number: $pr-number-closed"
          echo "pr merged=$pr-number-closed" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          


      - name: list the branches merged
        id: getregex
        run: |
          git fetch --prune
          
          # Expresión regular para filtrar ramas que sigan el patrón específico
          #regexBranchPattern='feature-E-[0-9]+-.*'#
          regexBranchPattern=$(git branch -r | grep -E 'origin/feature-E-[0-9]+-.*' | sed 's|origin/||')
          echo "$regexBranchPattern"


          # Obtener las ramas fusionadas en main
          # MERGED_BRANCHES=$(git branch -a --format "%(refname:short) %(upstream)" --merged main | awk '$2 !~/\/origin\// { print $1 }')
            MERGED_BRANCHES=$(gh pr list --state merged --base main --limit 20 --json title,headRefName,number,updatedAt,author,comments -q 'sort_by(.updatedAt) | reverse | .[0]')
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: compare pr merged with the branch to be deleted
        if: steps.getpr.outputs.pr-number-closed == steps.getregex.outputs.b_branch_name
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          issue-number: ${{ env.getpr }}
          body: |
             Please review el PR de la branch merged
             | author | PR number  | Branch Name merged |
             | -- | ---- | -------- |
             | @${{ github.actor }} | `${{ steps.getpr.outcome.pr_number }}` | `${{ steps.getregex.outcome.MERGED_BRANCHES }}` |

       
      - name: delete branch
        run: |

          # Filtrar solo las que cumplan con el patrón

           git fetch --prune

           FILTERED_BRANCHES=$(echo "$MERGED_BRANCHES" | grep -E "$regexBranchPatter" || true)
           if [[ -z "$FILTERED_BRANCHES" ]]; the
           echo "No stories to be merged" >> $GITHUB_OUTPUT
           exit 0
           fi
           
           echo "Deleting merged feature br
           echo "$FILTERED_BRANCHES"
           for BRANCH in $FILTERED_BRANCHES
           echo "$BRANCH"
             git push origin --delete $BRAN
           done
          
          # Filtrar solo las que cumplan con el patrón

           git fetch --prune

           FILTERED_BRANCHES=$(echo "$MERGED_BRANCHES" | grep -E "$regexBranchPatter" || true)
           if [[ -z "$FILTERED_BRANCHES" ]]; the
           echo "No stories to be merged" >> $GITHUB_OUTPUT
           exit 0
           fi
           
           echo "Deleting merged feature br
           echo "$FILTERED_BRANCHES"
           for BRANCH in $FILTERED_BRANCHES
           echo "$BRANCH"
             git push origin --delete $BRAN
           done
            


      


 
          # echo "Deleting merged feature branches:"
          # echo "$FILTERED_BRANCHES"

          # for BRANCH in $FILTERED_BRANCHES; do
          #   git push origin --delete $BRANCH
          # done